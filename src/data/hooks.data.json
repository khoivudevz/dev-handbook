[
	{
		"name": "useScreenSize",
		"path": "use-screen-size",
		"code": "import {useEffect} from 'react'\nimport {useState} from 'react'\n\nconst useScreenSize = () => {\n    const [screenSize, setScreenSize] = useState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n    })\n\n    useEffect(() => {\n        const updateScreenSize = () => {\n            setScreenSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            })\n        }\n\n        window.addEventListener('resize', updateScreenSize)\n        updateScreenSize()\n\n        return () => window.removeEventListener('resize', updateScreenSize)\n    }, [])\n\n    return screenSize\n}\n\nexport default useScreenSize",
		"language": "tsx"
	},
	{
		"name": "useKeyPress ",
		"path": "use-key-press",
		"code": "import {useEffect} from 'react'\n\ntype ModifierKeys = {\n    ctrl?: boolean\n    alt?: boolean\n    shift?: boolean\n}\n\nconst useKeypress = (\n    key: string,\n    action: () => void,\n    modifiers?: ModifierKeys\n) => {\n    useEffect(() => {\n        function onKeyup(e: KeyboardEvent) {\n            if (\n                e.key.toLowerCase() === key.toLowerCase() &&\n                (!modifiers?.ctrl || e.ctrlKey) &&\n                (!modifiers?.alt || e.altKey) &&\n                (!modifiers?.shift || e.shiftKey)\n            ) {\n                action()\n            }\n        }\n        window.addEventListener('keyup', onKeyup)\n        return () => window.removeEventListener('keyup', onKeyup)\n    }, [key, action, modifiers])\n}\n\nexport default useKeypress",
		"language": "tsx"
	}
]
